server.host=0.0.0.0
server.port=4567
server.staticFolder=/public
server.fileUploadFolder=/data/upload
server.modelsFolder=/data/models
server.geojsonFeatureCollectionsFolder=/data/feature_collections

# Uncomment to set expire time in seconds, by default there is no caching
# server.staticFiles.expireTime=60000

server.threads.max=200                       # -1=Use Spark default of 200
server.threads.min=8                         # -1=Use Spark default of 8
server.threads.idleTimeoutInMillis=60000     # -1=Use Spark default of 60000

server.session.idleTimeoutInSeconds=50000     # Login session timeout
server.session.timeoutIntervalInSeconds=5000    # How frequently to check for session timeouts

# server.ssl.keystoreFile=keystore.jks         # comment-out to use NOT use SSL
server.ssl.keystorePassword=praisewm
server.ssl.needsClientCert=false

# Minimum time interval between sending an identical Notification refresh event to the client.
# set to zero to disable the creation of interval timers
server.ws.refresh.minIntervalInMillis=1000

# How frequently the notification service should ping clients
server.ws.pingClientInMillis=100000

# How long the client will wait between receipt of any websocket message from the notification
# service before it closes its websocket and switches to reconnection mode.
#client.ws.inactivityTimeoutInMillis=300000
client.ws.inactivityTimeoutInMillis=36000000

# reconnectIntervalInMillis is the time a client will wait before attempting a reconnect on an
# unexpected close of a websocket. The client should continue to try to reconnect until a connection
# is established or maxReconnectAttempts. Until the connection can be established, the total time
# between retries is the reconnectIntervalInMillis plus the browser-specific connection timeout.
client.ws.reconnectIntervalInMillis=250
client.ws.maxReconnectAttempts=4            # maximum number of successive reconnection attempts

database.user=praisewm
database.password=praisewm
database.host=127.0.0.1
database.port=3306
database.url=jdbc:mysql://_HOST_:_PORT_/praisewm?createDatabaseIfNotExist=true&sslMode=PREFERRED
database.schema=praisewm

database.driver=com.mysql.cj.jdbc.Driver
database.jooq.sql.dialect=MYSQL
database.pool.size=10
database.autocommit=false

# Name of the environmental variable that will contain the name of the database host system.
# If the variable is set, the value will replace the HOST IP in the database.url property.
# This is primarily used to support running the app in a Docker container that is separate
# from the container used to house the database server.
database.host.env=PRAISEWM_DATABASE_HOST

# Register services.
#  Each service must start with service.implementation.n. where 'n' is the order
#  in which the service should be started.
#
# If a service is added that creates a Websocket endpoint, it must be started before
# the NotificationService.
#
# All services that create a REST route must be started after the NotificationService.

service.implementation.1.security=com.sri.ai.praisewm.service.SecurityServiceImpl
service.implementation.2.notification=com.sri.ai.praisewm.service.NotificationService
service.implementation.3.admin=com.sri.ai.praisewm.service.AdminService
service.implementation.4.user=com.sri.ai.praisewm.service.UserService
service.implementation.5.notificationInput=com.sri.ai.praisewm.service.NotificationInputService
service.implementation.6.fileTransfer=com.sri.ai.praisewm.service.FileTransferService
service.implementation.7.systemStatus=com.sri.ai.praisewm.service.SystemStatusService
service.implementation.8.praise=com.sri.ai.praisewm.service.praise_service.PraiseServiceImpl
