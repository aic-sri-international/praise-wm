buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "mysql:mysql-connector-java:${mysql_connector_java_version}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${gradle_apt_plugin_version}"
        classpath "nu.studer:gradle-jooq-plugin:${gradle_jooq_plugin_version}"
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flyway_core_version}"
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadow_version}"
        classpath "com.moowork.gradle:gradle-node-plugin:${gradle_node_plugin_version}"
    }
}


plugins {
    id 'java-library'
    id 'maven'
    id 'application'
}

group = 'com.sri.ai.praisewm'
version = '2.5'

description = "praisewm"

sourceCompatibility = 11
targetCompatibility = 11

// must precede shadow plugin
mainClassName = "${group}.ApplicationBootstrap"

apply plugin: 'com.github.johnrengelman.shadow'

jar {
    manifest {
        attributes(
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                // All of the following are included due to JFreeChart dependency requirements for graph creation
                // See: https://stackoverflow.com/questions/7051603/jai-vendorname-null
                'Specification-Title': "Java Advanced Imaging Image I/O Tools",
                'Specification-Version': "1.1",
                'Specification-Vendor': "Sun Microsystems, Inc.",
                'Implementation-Title': "com.sun.media.imageio",
                'Implementation-Version': "1.1",
                'Implementation-Vendor': "Sun Microsystems, Inc."
        )
    }
}

shadowJar {
    // Address problem that prevents jar from being extracted
    //  jar xf praisewm-2.0-all.jar
    //   java.io.FileNotFoundException: LICENSE (Is a directory)
    // Similar issue described here: https://dzone.com/articles/fixed-embedded-jetty-fails-0
    //
    exclude 'license/*'
    // Bug work-around : https://github.com/johnrengelman/shadow/issues/446
    archiveClassifier.set('all')
}

javadoc {
    // The JavaDoc in the generated jOOQ Java code does not contain all required return or
    // parameter values which would cause lots of warning messages.
    options.addStringOption('Xdoclint:none', '-quiet')
}

file("application.properties").withReader {
    Properties props = new Properties()
    props.load(it)
    project.ext.cfg = new ConfigSlurper().parse(props).flatten().each {
        // remove end-of-line comments
        int i = it.value.findIndexOf {it == '#'}
        if (i > -1) {
            it.value = it.value.substring(0, i).trim()
        }
    }

    String urlPropName = "database.url"
    String url  = "${project.ext.cfg[urlPropName]}"
    String host  = "${project.ext.cfg["database.host"]}"
    String port  = "${project.ext.cfg["database.port"]}"

    String envHost  = "${project.ext.cfg['database.host.env']}"
    if (envHost != null) {
        String altHost = System.getenv(envHost);
        if (altHost != null) {
            host = altHost;
        }
    }
    url = url.replace("_HOST_", host);
    url = url.replace("_PORT_", port);
    project.ext.cfg[urlPropName] = url;
    println "Database URL: '${project.ext.cfg[urlPropName]}'";
}

apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/flyway.gradle'
apply from: 'gradle/jooq.gradle'
apply from: 'gradle/node.gradle'

// We are only interested in the shadow jar related tasks
//
// If we remove the 'standard' jar related tasks, they won't get displayed as available
// but they don't seem to actually get removed, and will get run during a build cycle.
// We disabled them so that they get skipped and then remove them.
// We also remove the other tasks that we do not need.

[jar, startScripts, distTar, distZip, assembleDist, installDist,
 assemble, build, buildDependents, buildNeeded,
 init, install].each {
    it.enabled = false
}

test {
    useJUnitPlatform()
}

task copyClientResources(type: Copy) {
    from "${web_dist_src}"
    into "${buildDir}/resources/main/${project.ext.cfg['server.staticFolder']}"
    doLast {
        // Delete the shadow jar to force it to get recreated
        delete("${buildDir}/libs/${rootProject.name}-${version}-all.jar")
    }
}
copyClientResources.description 'Copies web client resources'
copyClientResources.dependsOn(yarn_run_build)
yarn_run_build.dependsOn(yarn_lint)

yarn_run_build.dependsOn(yarn_run_unit_tests)

task copyClientResourcesNoBuild(type: Copy) {
    from "${web_dist_src}"
    into "${buildDir}/resources/main/${project.ext.cfg['server.staticFolder']}"
    doLast {
        // Delete the shadow jar to force it to get recreated
        delete("${buildDir}/libs/${rootProject.name}-${version}-all.jar")
    }
}
copyClientResourcesNoBuild.description 'Copies web client current resources - does not trigger a build'

task deploy {
    setDependsOn([clean, yarn_lint, copyClientResources, test, shadowJar])
}
deploy.group 'build'
deploy.description 'Performs a clean rebuild of the client and server code, ' +
        'runs all unit tests and creates a shadowJar'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

apply from: 'gradle/docker.gradle'

repositories {
    maven { url "http://repo.boundlessgeo.com/main/" }
    maven { url "http://maven.geomajas.org/" }
    maven { url "http://repo.maven.apache.org/maven2" }
    // The aic- libs are published to the oss.sonatype.org repos. If developing in conjunction with
    // local development on the aic- libs code, you will probably want to declare mavenLocal()
    // before the sonatype repositories so that your local repository is searched first.
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    mavenLocal()
}

dependencies {
    implementation "com.googlecode.aic-util:aic-util:${aic_praise_version}"
    implementation "com.googlecode.aic-expresso:aic-expresso:${aic_praise_version}"
    implementation "com.googlecode.aic-praise:aic-praise:${aic_praise_version}"

    implementation "com.zaxxer:HikariCP:${HikariCP_version}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson_core_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_core_version}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jackson_core_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_core_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_core_version}"
    implementation "com.google.guava:guava:${guava_version}"
    implementation "com.jayway.jsonpath:json-path:${json_path_version}"
    implementation "com.sparkjava:spark-core:${spark_version}"
    implementation "commons-fileupload:commons-fileupload:${commons_fileupload_version}"
    implementation "ch.qos.logback:logback-classic:${logback_version}"
    implementation "javax.annotation:javax.annotation-api:${jaxax_annotation_api_version}"
    implementation "mysql:mysql-connector-java:${mysql_connector_java_version}"
    implementation "org.apache.commons:commons-lang3:${commons_lang3_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
}

wrapper {
    gradleVersion = "${gradle_version}"
    distributionType = Wrapper.DistributionType.ALL
}
