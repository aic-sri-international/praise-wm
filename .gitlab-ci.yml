# GitLab Pipeline for praise-wm

variables:
  MYSQL_ROOT_PASSWORD: praisewm
  MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
  MYSQL_USER: 'praisewm'
  MYSQL_PASSWORD: 'praisewm'
  MYSQL_DATABASE: 'praisewm'
#  See application.properties for information on PRAISEWM_DATABASE_HOST
  PRAISEWM_DATABASE_HOST: 'praisewm'
  REGISTRY: 'worldmodelers.cse.sri.com'
  # REGISTRY_USERNAME and REGISTRY_PASSWORD are set in GitLab -> Settings -> CI/CD -> Environment.
  DOCKER_BASE: 'praise-wm'
  BUILD_TAG: '$CI_COMMIT_REF_NAME'
  JAVA_OPTIONS: "-Djava.awt.headless=true"

cache:
  paths:
    - .gradle

stages:
  - buildClient
  - buildServer
  - docker
  - deploy

buildClient:
  stage: buildClient
  image: node:10.15.3
  script:
    - cd src/main/webapp
    - yarn
    - yarn lint
    - yarn test:unit
    - yarn build
  retry: 2
  artifacts:
    paths:
      - src/main/webapp/dist
    expire_in: 1 hour

buildServer:
  stage: buildServer
  image: openjdk:11.0.2-jdk-slim
  dependencies:
    - buildClient
  services:
    - name: mysql:5.7.18
      alias: praisewm
  script:
    - echo -e "\norg.gradle.daemon=false" >> ./gradle.properties
    - ./gradlew
    - ./gradlew compileJava
    - ./gradlew test
    - ./gradlew copyClientResourcesNoBuild
    - ./gradlew shadowJar
  retry: 2
  artifacts:
    paths:
      - build/libs
    expire_in: 1 week

# Use kaniko to build the docker image so we don't need a privileged runner.
docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$REGISTRY\":{\"username\":\"$REGISTRY_USERNAME\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - if [ "$CI_COMMIT_REF_NAME" = "master" ] ; then DEST2="--destination $REGISTRY/$DOCKER_BASE:latest" ; fi
    - /kaniko/executor -v warn --context $CI_PROJECT_DIR --dockerfile src/main/docker/Dockerfile --destination $REGISTRY/$DOCKER_BASE:$BUILD_TAG $DEST2

deploy:
  stage: deploy
  # only:
  #   - master
  image: alpine
  cache:
    paths:
      - deploy
    key: deploy
  script:
    - PATH=${PWD}/deploy:${PATH}
    - sh src/main/k8s/get-kubectl.sh deploy
    - kubectl config set-cluster dev --server=https://dev.k8s.sri.com:6443 --certificate-authority=src/main/k8s/dev-ca.pem
    - kubectl config set-credentials ci --token=${K8S_TOKEN}
    - kubectl config set-context dev --cluster=dev --user=ci
    - kubectl config use-context dev
    - cd src/main/k8s && kustomize edit set image praise-wm-placeholder=$REGISTRY/$DOCKER_BASE:$BUILD_TAG
    - kubectl apply -k src/main/k8s
